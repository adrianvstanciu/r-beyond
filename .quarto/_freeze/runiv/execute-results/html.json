{
  "hash": "ffeacd0707483bb55a92195cdc8072f1",
  "result": {
    "engine": "knitr",
    "markdown": "# R universe {#sec-runiv}\n\n\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![](img/runiv.jpg){fig-align='center' width=50%}\n:::\n:::\n\n\nTo paraphrase, _R_ is a dialect of another programming language, namely _S_. You can read more about the history of _R_ (and _S_) [here](https://bookdown.org/rdpeng/rprogdatascience/history-and-overview-of-r.html). Long story short, _R_ is a programming language derived from _S_ that was available only for commercial packages. _R_ was created by **Ross Ihaka** and **Robert Gentleman** in 1991 at the University of Auckland, New Zealand. In 1995, it became an open source code thanks to contributions by **Martin Mächler**.\n\nIn this short book, I will use interchangeably `r` and _R_.\n\nThe online and free book by **Roger D. Peng** [_R programming for data science_](https://bookdown.org/rdpeng/rprogdatascience/) is a good further reading for those interested. \n\nThe online and free book by **Oscar Baruffa** [_Big book of R_](https://www.bigbookofr.com/) is an excelent collection of available resources to learn and master _R_. \n\n## R (the console and language) {-} \n\n![The _R_ console](img/rconsole.png){.lightbox width=50% #fig-rconsole}\n\nWhen most people talk about `r` they mean both the programming language and a console. Unless they are IT experts who can make the distinction with ease. But, for the purpose of the seminar, or as a typical `r`-user for what is worth, it really doesn't matter. \n\nWhen working with `r` one needs a designated console for writing the code, and this is easy to detect as `r`-console (see Figure @fig-rconsole). \n\nTo download _R_, go to the [cran](https://cran.r-project.org/) website and select the file suitable for your operating system. Unzip or install that file and the `r`-console will be installed on your machine.\n\n## The basics (the very basics!) {-}\n\nThis seminar will cover only the very absolute basics of working in `r`. Designated courses are available at the university and elsewhere as part of summarschools or workshops. Of course, one can learn `r` using the freely available online content. Use YouTube and Google for that. For example, this [online resource](https://r02pro.github.io/) is a good starting point.\n\nThe first thing to notice in the `r` console is the symbol `>` followed by the text placer `|`. This specifies the line where to write the `r` code. \n\nOnce the code is written and the key Enter is pressed, the code basically `run`s or is computed by the machine which returns an outcome. (Here the symbol `>` is not visible but the outcome line can be identified through the use of squared brackets[…])\n\n\n::: {.cell}\n\n```{.r .cell-code}\n2+2\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 4\n```\n\n\n:::\n:::\n\n\n### Objects\n\nIt is useful to work with objects in `r`. That is, whatever code you write, place it into an object and then run the object itself. See below. \n\n\n::: {.cell}\n\n```{.r .cell-code}\n# no object created\n2+2\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 4\n```\n\n\n:::\n\n```{.r .cell-code}\n# object is first created and then run\nsum<-2+2\nsum\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 4\n```\n\n\n:::\n:::\n\n\nUsing objects simplifies a lot the work flow because you can combine objects in any way you can imagine!\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# creates a second object called mean\nmean<-mean(c(1,2,5,7,8,9))\nmean\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 5.333333\n```\n\n\n:::\n\n```{.r .cell-code}\n# and then adds the two objects 'sum' and 'mean' together\nresult<-sum+mean\nresult\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 9.333333\n```\n\n\n:::\n:::\n\n\n### Vectors\n\nThere are multiple types of objects that one can create in `r`. The most important ones are vectors and data tables. \n\nFor simplicity reasons, vectors can be numeric, character strings or logical. A vector is scalable meaning that it can hold up to a gazilion of elements.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# example of numeric vectors\nvec1<-c(1,3,66,9,121)\nvec1\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1]   1   3  66   9 121\n```\n\n\n:::\n\n```{.r .cell-code}\n# example of character string vector\nvec2<-c(\"A\",\"Ab\",\"This or that\",\"C\",\"d\")\nvec2\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"A\"            \"Ab\"           \"This or that\" \"C\"            \"d\"           \n```\n\n\n:::\n\n```{.r .cell-code}\n# example of logical vector\nvec3<-c(TRUE,TRUE, FALSE, TRUE)\nvec3\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1]  TRUE  TRUE FALSE  TRUE\n```\n\n\n:::\n:::\n\n\nOne can do all sorts of things with and to vectors. See for example [here](https://r02pro.github.io/vector.html).\n\n### Data tables\n\nData tables combine multiple vectors. Data tables can combine all sorts of vectors and can have varying internal structures. When one downloads (or uses one own's) dataset, that is typically a data table in a specific format, `.sav` for SPSS or `.xlsx` for Microsoft Excell. Data formats can also be `.dat`, `.csv`, `.asci` and so on. \n\nA data table in `r` comprises multiple vectors and involves an organization wherein typically rows represent entries in the data table and columns represent vectors of the data table. In other words, rows represent cases and columns represent variables.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# create a simple data table\ndf<-data.frame(col1=vec1,\n                  col2=vec2)\ndf\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n  col1         col2\n1    1            A\n2    3           Ab\n3   66 This or that\n4    9            C\n5  121            d\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# one can then access the varying elements of the data table\n\n# access col1\ndf[,1]\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1]   1   3  66   9 121\n```\n\n\n:::\n\n```{.r .cell-code}\n# access first row\ndf[1,]\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n  col1 col2\n1    1    A\n```\n\n\n:::\n\n```{.r .cell-code}\n# access entry at first row and col1\ndf[1,1]\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 1\n```\n\n\n:::\n:::\n\n\nOne can perform all sorts of actions on the data table as a whole or on elements of the data table. \n\n\n::: {.cell}\n\n```{.r .cell-code}\n# checks the elements of the data table\nstr(df)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n'data.frame':\t5 obs. of  2 variables:\n $ col1: num  1 3 66 9 121\n $ col2: chr  \"A\" \"Ab\" \"This or that\" \"C\" ...\n```\n\n\n:::\n:::\n\n\nOne can see that col1 is a numeric `num` vector and col2 is a character string `char` vector.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# provides a summary of the data table\nsummary(df)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n      col1         col2          \n Min.   :  1   Length:5          \n 1st Qu.:  3   Class :character  \n Median :  9   Mode  :character  \n Mean   : 40                     \n 3rd Qu.: 66                     \n Max.   :121                     \n```\n\n\n:::\n:::\n\n\nOne can see that different summary stats are available for `num` and `chr` vectors. \n\n\n::: {.cell}\n\n```{.r .cell-code}\n# performs an addition on the numeric vector of the data table\ndf[,1]+100\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 101 103 166 109 221\n```\n\n\n:::\n:::\n\n\n## Functions {-}\n\nTo be entirely honest, `r` functions are something a bit advanced. But, some rudimentary functions can be written by beginners too. The trick is to figure out what is repetitive in the code that one wants to write. This logic proves useful when one needs to apply a command on a number of objects for an undetermined number of times. \n\nFunctions are easy to spot in _R_ because they are labeled as such and have a unique code structure: `function(){}`. \n\nThe rule of thumb is `()` defines the elements that are fed into the function while `{}` contains the function itself. \n\nHere is an example. We use a dataset that comes pre-installed with _R_ (`iris`), perform an addition on all the numerical variables and then write a function to simplify the task.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# see the first ten rows of the pre-installed dataset iris\nhead(iris)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n  Sepal.Length Sepal.Width Petal.Length Petal.Width Species\n1          5.1         3.5          1.4         0.2  setosa\n2          4.9         3.0          1.4         0.2  setosa\n3          4.7         3.2          1.3         0.2  setosa\n4          4.6         3.1          1.5         0.2  setosa\n5          5.0         3.6          1.4         0.2  setosa\n6          5.4         3.9          1.7         0.4  setosa\n```\n\n\n:::\n\n```{.r .cell-code}\n# numerical columns are then columns 1 through 4\n\n# adds 3 to all numerical columns\nhead(iris[,1:4] + 3)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n  Sepal.Length Sepal.Width Petal.Length Petal.Width\n1          8.1         6.5          4.4         3.2\n2          7.9         6.0          4.4         3.2\n3          7.7         6.2          4.3         3.2\n4          7.6         6.1          4.5         3.2\n5          8.0         6.6          4.4         3.2\n6          8.4         6.9          4.7         3.4\n```\n\n\n:::\n\n```{.r .cell-code}\n# add 77 to all numerical columns \nhead(iris[,1:4] + 77)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n  Sepal.Length Sepal.Width Petal.Length Petal.Width\n1         82.1        80.5         78.4        77.2\n2         81.9        80.0         78.4        77.2\n3         81.7        80.2         78.3        77.2\n4         81.6        80.1         78.5        77.2\n5         82.0        80.6         78.4        77.2\n6         82.4        80.9         78.7        77.4\n```\n\n\n:::\n\n```{.r .cell-code}\n# write a function \n# this function takes two arguments: a dataset 'df' and a constant 'n'\nfunc1<-function(df,n){\n  \n  tmp <- Filter(is.numeric, df) # we first filter the dataframe for numeric columns\n  \n  tmp + n # we then add the constant to all the numeric columns\n}\n\n\n# we apply the function and add 3 to all numeric columns of iris\n# we only ask to see the first ten rows of the outcome using head()\nhead(func1(iris,3))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n  Sepal.Length Sepal.Width Petal.Length Petal.Width\n1          8.1         6.5          4.4         3.2\n2          7.9         6.0          4.4         3.2\n3          7.7         6.2          4.3         3.2\n4          7.6         6.1          4.5         3.2\n5          8.0         6.6          4.4         3.2\n6          8.4         6.9          4.7         3.4\n```\n\n\n:::\n\n```{.r .cell-code}\n# we apply the function and add 99 to all numeric columns of another pre-installed dataset 'mtcars'\n# we only ask to see the first ten rows of the outcome using head()\nhead(func1(mtcars,99))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n                    mpg cyl disp  hp   drat      wt   qsec  vs  am gear carb\nMazda RX4         120.0 105  259 209 102.90 101.620 115.46  99 100  103  103\nMazda RX4 Wag     120.0 105  259 209 102.90 101.875 116.02  99 100  103  103\nDatsun 710        121.8 103  207 192 102.85 101.320 117.61 100 100  103  100\nHornet 4 Drive    120.4 105  357 209 102.08 102.215 118.44 100  99  102  100\nHornet Sportabout 117.7 107  459 274 102.15 102.440 116.02  99  99  102  101\nValiant           117.1 105  324 204 101.76 102.460 119.22 100  99  102  100\n```\n\n\n:::\n:::\n\n\n## Packages {-}\n\nAn _R_ package contains code, documentation, and sometimes even data. These packages are developed to serve a specific purpose such as simplifying a work routine or perform advanced computational routines. Packages can be downloaded for free and then immediately used. Of course, everyone can write an _R_ package, which of course is not a easy thing to do. But if at any point and for whatever reason you need to, then know that it is possible.\n\nEverything one needs to know about packages can be found in this [comprehensive book](https://r-pkgs.org/) by Hadley Wickham^[He is THE `r` expert. See [his website](https://hadley.nz/).] and Jennifer Bryan.\n\n`r` packages use the philosophy of working with functions to simplify otherwise highly complex code. Some of the fundamental packages to start with are `tidyverse` (for data preparation and manipulation but also contains several other useful packages like `ggplot2` for creating graphics). Other packages that are the focus of this seminar are `rmarkdown` (the fundamentals of @sec-autom through @sec-apps), `quarto` (needed for self-publishing books and website; covered in @sec-publish),`tinytex` (for latex distributions aka. creating PDFs), `shiny` (for web applications; covered in @sec-apps).\n\nWhat you absolutely need to know about packages is that the vast majority do not come pre-installed with the `r` console but can be installed by request. Installing any package in _R_ follows this basic routine:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# installs `tidyverse`\n install.packages(\"tidyverse\") \n\n# makes it available for R on your local machine\n# this step is crucial if you want to have access to all the containing function\nlibrary(tidyverse)\n```\n:::\n\n\nOne trick that I think it is absolutely simple to use but can save you a lot of nerves is using the package `pacman` to install any other packages. The nice thing about it is that `pacman` can first check if a package is already installed on the local machine and if not, it downloads it and installs it from `Cran`. \n\nWe can now install the basic packages needed for the seminar and mentioned above.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# first, we install the `pacman` package\ninstall.packages(\"pacman\")\n\n# then, we use the function `p_load` from the `pacman` package to install `tidyverse`, `rmarkdown`, `shiny` packages\npacman::p_load(tidyverse,rmarkdown,bookdown,quarto,shiny)\n```\n:::\n\n\n:::{.callout-tip #tip-package1}\n## R Packages with websites\n(Almost) Every package has a designated website. Visit the package website for examples on how to use and also to identify the functions contained. For example https://www.tidyverse.org/\n\n:::\n\n:::{.callout-tip #tip-packdoc}\n## R Packages documentation\nCall the package documentation by typing in a question mark followed by the name of the package or function contained in a package. For example ?tidyverse\n\n:::\n\nLet's see as an example how the function `filter` from the universe of packages `tidyverse` works. Before that, I want to introduce the pipe operator `%>%`^[The pipe operator itself is introduced most comonly in the package `dplyr` contained in the universe of packages `tidyverse`. But, it can be used differently in other packages too.] which is instrumental for `r` users. And it simplifies a lot the work flow!\n\n`%>%` follows the logic of, simply and un-elegantly put, \"work that happens in the background until the desired output is retrieved\". It also means that using ` %>% ` you can compress into one code otherwise a long chain of steps that involve creating objects which are then subjected to new operations.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# apply the function filter to the dataset mtcars\n# we filter the column cyl such that only cars with a cyl < 5 are displayed\nhead(mtcars)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n                   mpg cyl disp  hp drat    wt  qsec vs am gear carb\nMazda RX4         21.0   6  160 110 3.90 2.620 16.46  0  1    4    4\nMazda RX4 Wag     21.0   6  160 110 3.90 2.875 17.02  0  1    4    4\nDatsun 710        22.8   4  108  93 3.85 2.320 18.61  1  1    4    1\nHornet 4 Drive    21.4   6  258 110 3.08 3.215 19.44  1  0    3    1\nHornet Sportabout 18.7   8  360 175 3.15 3.440 17.02  0  0    3    2\nValiant           18.1   6  225 105 2.76 3.460 20.22  1  0    3    1\n```\n\n\n:::\n\n```{.r .cell-code}\nmtcars %>% filter(cyl < 5)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n                mpg cyl  disp  hp drat    wt  qsec vs am gear carb\nDatsun 710     22.8   4 108.0  93 3.85 2.320 18.61  1  1    4    1\nMerc 240D      24.4   4 146.7  62 3.69 3.190 20.00  1  0    4    2\nMerc 230       22.8   4 140.8  95 3.92 3.150 22.90  1  0    4    2\nFiat 128       32.4   4  78.7  66 4.08 2.200 19.47  1  1    4    1\nHonda Civic    30.4   4  75.7  52 4.93 1.615 18.52  1  1    4    2\nToyota Corolla 33.9   4  71.1  65 4.22 1.835 19.90  1  1    4    1\nToyota Corona  21.5   4 120.1  97 3.70 2.465 20.01  1  0    3    1\nFiat X1-9      27.3   4  79.0  66 4.08 1.935 18.90  1  1    4    1\nPorsche 914-2  26.0   4 120.3  91 4.43 2.140 16.70  0  1    5    2\nLotus Europa   30.4   4  95.1 113 3.77 1.513 16.90  1  1    5    2\nVolvo 142E     21.4   4 121.0 109 4.11 2.780 18.60  1  1    4    2\n```\n\n\n:::\n\n```{.r .cell-code}\n# we filter the column cyl such that only cars with a cyl exactly equal to 8 are displayed\nmtcars %>% filter(cyl == 8)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n                     mpg cyl  disp  hp drat    wt  qsec vs am gear carb\nHornet Sportabout   18.7   8 360.0 175 3.15 3.440 17.02  0  0    3    2\nDuster 360          14.3   8 360.0 245 3.21 3.570 15.84  0  0    3    4\nMerc 450SE          16.4   8 275.8 180 3.07 4.070 17.40  0  0    3    3\nMerc 450SL          17.3   8 275.8 180 3.07 3.730 17.60  0  0    3    3\nMerc 450SLC         15.2   8 275.8 180 3.07 3.780 18.00  0  0    3    3\nCadillac Fleetwood  10.4   8 472.0 205 2.93 5.250 17.98  0  0    3    4\nLincoln Continental 10.4   8 460.0 215 3.00 5.424 17.82  0  0    3    4\nChrysler Imperial   14.7   8 440.0 230 3.23 5.345 17.42  0  0    3    4\nDodge Challenger    15.5   8 318.0 150 2.76 3.520 16.87  0  0    3    2\nAMC Javelin         15.2   8 304.0 150 3.15 3.435 17.30  0  0    3    2\nCamaro Z28          13.3   8 350.0 245 3.73 3.840 15.41  0  0    3    4\nPontiac Firebird    19.2   8 400.0 175 3.08 3.845 17.05  0  0    3    2\nFord Pantera L      15.8   8 351.0 264 4.22 3.170 14.50  0  1    5    4\nMaserati Bora       15.0   8 301.0 335 3.54 3.570 14.60  0  1    5    8\n```\n\n\n:::\n:::\n\n\nAs an example of the usefulness of the pipeline operator ` %>% `, let us apply a double filter. First, on the column `cyl` and then on the column horse power `hp`. \n\n\n::: {.cell}\n\n```{.r .cell-code}\n# without the pipeline operator\na<-mtcars %>% filter(cyl < 5)\nb<-a %>% filter(hp > 100)\nb\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n              mpg cyl  disp  hp drat    wt qsec vs am gear carb\nLotus Europa 30.4   4  95.1 113 3.77 1.513 16.9  1  1    5    2\nVolvo 142E   21.4   4 121.0 109 4.11 2.780 18.6  1  1    4    2\n```\n\n\n:::\n\n```{.r .cell-code}\n# with the pipeline operator\nmtcars %>% filter(cyl < 5) %>% filter(hp > 100)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n              mpg cyl  disp  hp drat    wt qsec vs am gear carb\nLotus Europa 30.4   4  95.1 113 3.77 1.513 16.9  1  1    5    2\nVolvo 142E   21.4   4 121.0 109 4.11 2.780 18.6  1  1    4    2\n```\n\n\n:::\n:::\n\n\nOf course, this example is too simplistic but imagine having to write a gazillion of lines of code when you could reduce that to a couple. Throughout the seminar we use the pipe operator ` %>% ` almost everywhere!\n\n## Base R vs. Packages {-}\n\n![](img/decision.jpg){.lightbox width=50% #fig-decision}\n\nA fair warning! \n\nBase _R_ is complex but stable. Packages are simple to use but depend on the community for their maintenance. So, the decision is to use something complex but stable or simple but unstable. \n\nFor the purpose of this seminar, and for most of the things a regular _R_-user needs, working with packages is indeed the way to go. \n\nIf at any point, you are concerned that the package(s) you use can get outdated, I recommend using the [sic!] package `groundhog` which ensures reproducible code. This package basically goes back in time and installs on the local machine the desired version of the package. \n\nSee how it works on this [website](https://groundhogr.com/).\n\n## RStudio {-}\n\n![RStudio panels](img/rstudpanels.png){.lightbox width=75% #fig-rstudio}\n\nIn @fig-rstudio you can see the four panels of `RStudio`, the (a) Console/terminal, (b) Source, (c) Environment/history, and (d) Files/plot/packages/help.\n\n- **a) Console/terminal** Here is where the `r` console is integrated in `RStudio`. You can type in your code, have your results previewed, as well as any errors (those happen quite a lot) that occur in your coding. \n\n- **b) Source** This panel is where we will do most of the work throughout the seminar. Think of this panel as the notebook -- you write, you draw, you comment on your own work, etc. This panel allows you to communicate with the source material, which can be `r` (the language), `html` (the language) and also lets you populate with content the files needed for the website, for instance.\n\n- **c) Environment/history** This panel is a place where you can see the history of your work. It saves for you the code you ran (either in the console or source panels) and also it contains sort of short-cuts to any data-related work you might have done.\n\n- **d) Files/plot/packages/help** This panel allows you to preview what you've communicated to the machine (laptop) to do. You will note there are several tabs, but the most important one for the seminar are:\n\n  + `Files` is sort of *Windows explorer* in Windows or *Finder* on Mac OS. It is here that you can navigate between folders on the local machine, delete, rename, or more. Here you can also open files in the source panel.\n  + `Packages` gives you an overview of packages that are installed and active on the local machine. \n  + `Help` is, well, where you will see helpful information about a function or package. \n\nOn [this youtube channel](https://www.youtube.com/watch?v=lVKMsaWju8w) there is a helpful beginners guide on _R_ and `RStudio`. Take some time to familiarize yourself with them.\n\n:::{.callout-tip #tip-rres}\n## Learning resources\nIf your `RStudio` version is 2024.04. or newer, you should note in the Environment/ History panel a tab \"Turorial\". That panel contains tutorials for working in _R_. Install first the package `learnr` as indicated and let yourself guided through a number of interactive exercises.\n:::\n\n## Advanced resources {-}\n\nTogether with a colleague, [Dr. Ranjit SINGH](https://www.gesis.org/en/institute/about-us/staff/person/Ranjit.Singh) from GESIS - Leibniz Institute for the Social Sciences, I prepared a workshop on `r` for beginners. All the material is open access via `GitHub`. \n\nYou can `clone` the repository on your local machine and do all the exercises.\n\nNavigate first to the page of the repository and then `clone` it to your local machine: https://github.com/adrianvstanciu/rworkshop_open.\n\n\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}